[debug] [2025-04-27T15:11:38.809Z] ----------------------------------------------------------------------
[debug] [2025-04-27T15:11:38.811Z] Command:       C:\Program Files\nodejs\node.exe C:\Users\David\AppData\Roaming\npm\node_modules\firebase-tools\lib\bin\firebase.js deploy --only firestore
[debug] [2025-04-27T15:11:38.812Z] CLI Version:   14.2.1
[debug] [2025-04-27T15:11:38.812Z] Platform:      win32
[debug] [2025-04-27T15:11:38.812Z] Node Version:  v22.9.0
[debug] [2025-04-27T15:11:38.812Z] Time:          Sun Apr 27 2025 11:11:38 GMT-0400 (Eastern Daylight Time)
[debug] [2025-04-27T15:11:38.812Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-04-27T15:11:38.925Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2025-04-27T15:11:38.926Z] > authorizing via signed-in user (dtweisberg@gmail.com)
[debug] [2025-04-27T15:11:38.926Z] [iam] checking project gigfriend-9b3ea for permissions ["datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get"]
[debug] [2025-04-27T15:11:38.927Z] Checked if tokens are valid: true, expires at: 1745769687792
[debug] [2025-04-27T15:11:38.927Z] Checked if tokens are valid: true, expires at: 1745769687792
[debug] [2025-04-27T15:11:38.927Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/gigfriend-9b3ea:testIamPermissions [none]
[debug] [2025-04-27T15:11:38.927Z] >>> [apiv2][(partial)header] POST https://cloudresourcemanager.googleapis.com/v1/projects/gigfriend-9b3ea:testIamPermissions x-goog-quota-user=projects/gigfriend-9b3ea
[debug] [2025-04-27T15:11:38.928Z] >>> [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/gigfriend-9b3ea:testIamPermissions {"permissions":["datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get"]}
[debug] [2025-04-27T15:11:39.142Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/gigfriend-9b3ea:testIamPermissions 200
[debug] [2025-04-27T15:11:39.142Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/gigfriend-9b3ea:testIamPermissions {"permissions":["datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get"]}
[info] 
[info] === Deploying to 'gigfriend-9b3ea'...
[info] 
[info] i  deploying firestore 
[info] i  firestore: reading indexes from firestore.indexes.json... 
[info] i  cloud.firestore: checking firestore.rules for compilation errors... 
[debug] [2025-04-27T15:11:39.146Z] Checked if tokens are valid: true, expires at: 1745769687792
[debug] [2025-04-27T15:11:39.146Z] Checked if tokens are valid: true, expires at: 1745769687792
[debug] [2025-04-27T15:11:39.146Z] >>> [apiv2][query] POST https://firebaserules.googleapis.com/v1/projects/gigfriend-9b3ea:test [none]
[debug] [2025-04-27T15:11:39.146Z] >>> [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/gigfriend-9b3ea:test [omitted]
[debug] [2025-04-27T15:11:39.341Z] <<< [apiv2][status] POST https://firebaserules.googleapis.com/v1/projects/gigfriend-9b3ea:test 200
[debug] [2025-04-27T15:11:39.341Z] <<< [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/gigfriend-9b3ea:test {}
[info] +  cloud.firestore: rules file firestore.rules compiled successfully 
[debug] [2025-04-27T15:11:39.342Z] Checked if tokens are valid: true, expires at: 1745769687792
[debug] [2025-04-27T15:11:39.342Z] Checked if tokens are valid: true, expires at: 1745769687792
[info] i  firestore: deploying indexes... 
[debug] [2025-04-27T15:11:39.343Z] Checked if tokens are valid: true, expires at: 1745769687792
[debug] [2025-04-27T15:11:39.343Z] Checked if tokens are valid: true, expires at: 1745769687792
[debug] [2025-04-27T15:11:39.343Z] >>> [apiv2][query] GET https://firebaserules.googleapis.com/v1/projects/gigfriend-9b3ea/releases pageSize=10&pageToken=
[debug] [2025-04-27T15:11:39.343Z] >>> [apiv2][query] GET https://firestore.googleapis.com/v1/projects/gigfriend-9b3ea/databases/(default)/collectionGroups/-/indexes [none]
[debug] [2025-04-27T15:11:39.526Z] <<< [apiv2][status] GET https://firebaserules.googleapis.com/v1/projects/gigfriend-9b3ea/releases 200
[debug] [2025-04-27T15:11:39.526Z] <<< [apiv2][body] GET https://firebaserules.googleapis.com/v1/projects/gigfriend-9b3ea/releases {"releases":[{"name":"projects/gigfriend-9b3ea/releases/cloud.firestore","rulesetName":"projects/gigfriend-9b3ea/rulesets/31d2f03a-62dd-4d15-9694-e5ab1ce111fc","createTime":"2025-04-22T13:00:57.403191Z","updateTime":"2025-04-22T17:06:02.970697Z"}]}
[debug] [2025-04-27T15:11:39.526Z] Checked if tokens are valid: true, expires at: 1745769687792
[debug] [2025-04-27T15:11:39.526Z] Checked if tokens are valid: true, expires at: 1745769687792
[debug] [2025-04-27T15:11:39.526Z] >>> [apiv2][query] GET https://firebaserules.googleapis.com/v1/projects/gigfriend-9b3ea/rulesets/31d2f03a-62dd-4d15-9694-e5ab1ce111fc [none]
[debug] [2025-04-27T15:11:39.603Z] <<< [apiv2][status] GET https://firestore.googleapis.com/v1/projects/gigfriend-9b3ea/databases/(default)/collectionGroups/-/indexes 200
[debug] [2025-04-27T15:11:39.603Z] <<< [apiv2][body] GET https://firestore.googleapis.com/v1/projects/gigfriend-9b3ea/databases/(default)/collectionGroups/-/indexes {"indexes":[{"name":"projects/gigfriend-9b3ea/databases/(default)/collectionGroups/timeEntries/indexes/CICAgOjXh4EK","queryScope":"COLLECTION","fields":[{"fieldPath":"userId","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"}]}
[debug] [2025-04-27T15:11:39.603Z] Checked if tokens are valid: true, expires at: 1745769687792
[debug] [2025-04-27T15:11:39.603Z] Checked if tokens are valid: true, expires at: 1745769687792
[debug] [2025-04-27T15:11:39.603Z] >>> [apiv2][query] GET https://firestore.googleapis.com/v1/projects/gigfriend-9b3ea/databases/(default)/collectionGroups/-/fields?filter=indexConfig.usesAncestorConfig=false OR ttlConfig:* [none]
[debug] [2025-04-27T15:11:39.678Z] <<< [apiv2][status] GET https://firestore.googleapis.com/v1/projects/gigfriend-9b3ea/databases/(default)/collectionGroups/-/fields?filter=indexConfig.usesAncestorConfig=false OR ttlConfig:* 200
[debug] [2025-04-27T15:11:39.678Z] <<< [apiv2][body] GET https://firestore.googleapis.com/v1/projects/gigfriend-9b3ea/databases/(default)/collectionGroups/-/fields?filter=indexConfig.usesAncestorConfig=false OR ttlConfig:* {"fields":[{"name":"projects/gigfriend-9b3ea/databases/(default)/collectionGroups/__default__/fields/*","indexConfig":{"indexes":[{"queryScope":"COLLECTION","fields":[{"fieldPath":"*","order":"ASCENDING"}],"state":"READY"},{"queryScope":"COLLECTION","fields":[{"fieldPath":"*","order":"DESCENDING"}],"state":"READY"},{"queryScope":"COLLECTION","fields":[{"fieldPath":"*","arrayConfig":"CONTAINS"}],"state":"READY"}]}}]}
[info] i  firestore: The following indexes are defined in your project but are not present in your firestore indexes file:
	(timeEntries) -- (userId,ASCENDING) (createdAt,DESCENDING)  
[debug] [2025-04-27T15:11:39.685Z] <<< [apiv2][status] GET https://firebaserules.googleapis.com/v1/projects/gigfriend-9b3ea/rulesets/31d2f03a-62dd-4d15-9694-e5ab1ce111fc 200
[debug] [2025-04-27T15:11:39.685Z] <<< [apiv2][body] GET https://firebaserules.googleapis.com/v1/projects/gigfriend-9b3ea/rulesets/31d2f03a-62dd-4d15-9694-e5ab1ce111fc [omitted]
[info] i  firestore: uploading rules firestore.rules... 
[debug] [2025-04-27T15:11:39.685Z] Checked if tokens are valid: true, expires at: 1745769687792
[debug] [2025-04-27T15:11:39.685Z] Checked if tokens are valid: true, expires at: 1745769687792
[debug] [2025-04-27T15:11:39.686Z] >>> [apiv2][query] POST https://firebaserules.googleapis.com/v1/projects/gigfriend-9b3ea/rulesets [none]
[debug] [2025-04-27T15:11:39.686Z] >>> [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/gigfriend-9b3ea/rulesets [omitted]
[debug] [2025-04-27T15:11:40.024Z] <<< [apiv2][status] POST https://firebaserules.googleapis.com/v1/projects/gigfriend-9b3ea/rulesets 200
[debug] [2025-04-27T15:11:40.024Z] <<< [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/gigfriend-9b3ea/rulesets {"name":"projects/gigfriend-9b3ea/rulesets/a08b4f59-fcae-4ba9-9193-7db2f080779f","source":{"files":[{"content":"rules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    // Helper functions\r\n    function isAuthenticated() {\r\n      return request.auth != null;\r\n    }\r\n    \r\n    function isUserOwned(userId) {\r\n      return isAuthenticated() && userId == request.auth.uid;\r\n    }\r\n    \r\n    function isAdmin() {\r\n      return isAuthenticated() && \r\n             exists(/databases/$(database)/documents/userProfiles/$(request.auth.uid)) &&\r\n             get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';\r\n    }\r\n    \r\n    function hasValidFields(requiredFields) {\r\n      return request.resource.data.keys().hasAll(requiredFields);\r\n    }\r\n    \r\n    // Default rule - deny all access unless explicitly allowed\r\n    match /{document=**} {\r\n      allow read, write: if false;\r\n    }\r\n    \r\n    // Messages collection rules\r\n    match /messages/{messageId} {\r\n      // Allow reading messages if user is authenticated\r\n      allow read: if isAuthenticated();\r\n      \r\n      // Allow creating messages if:\r\n      // 1. User is authenticated\r\n      // 2. The message's user.uid matches the authenticated user's ID\r\n      // 3. The createdAt field is a valid timestamp\r\n      // 4. Text is not empty and is a string\r\n      // 5. Maximum text length is 2000 characters\r\n      allow create: if isAuthenticated() &&\r\n                    request.resource.data.user.uid == request.auth.uid &&\r\n                    request.resource.data.createdAt is timestamp &&\r\n                    request.resource.data.text is string &&\r\n                    request.resource.data.text.size() > 0 &&\r\n                    request.resource.data.text.size() <= 2000;\r\n      \r\n      // Prevent updates and deletes entirely (except for admins)\r\n      allow update, delete: if isAdmin();\r\n    }\r\n    \r\n    // TimeEntries collection rules\r\n    match /timeEntries/{entryId} {\r\n      // Allow reading only the user's own time entries (or all for admins)\r\n      allow read: if isUserOwned(resource.data.userId) || isAdmin();\r\n      \r\n      // Allow creating time entries if:\r\n      // 1. User is authenticated\r\n      // 2. The entry's userId matches the authenticated user's ID\r\n      // 3. Required fields exist and have correct types\r\n      // 4. Clock-in time is not in the future\r\n      allow create: if isAuthenticated() &&\r\n                    request.resource.data.userId == request.auth.uid &&\r\n                    request.resource.data.clockIn is timestamp &&\r\n                    request.resource.data.createdAt is timestamp &&\r\n                    request.resource.data.clockIn <= request.time &&\r\n                    hasValidFields(['userId', 'clockIn', 'createdAt', 'status']);\r\n      \r\n      // Allow updating only the user's own time entries\r\n      // Ensure userId cannot be changed\r\n      allow update: if isUserOwned(resource.data.userId) &&\r\n                    request.resource.data.userId == resource.data.userId &&\r\n                    (request.resource.data.clockOut == null || \r\n                     request.resource.data.clockOut is timestamp);\r\n      \r\n      // Allow deleting only the user's own time entries\r\n      allow delete: if isUserOwned(resource.data.userId);\r\n    }\r\n    \r\n    // User Profiles collection\r\n    match /userProfiles/{userId} {\r\n      // Users can read their own profile and admins can read all\r\n      allow read: if isUserOwned(userId) || isAdmin();\r\n      \r\n      // Users can create their own profile\r\n      allow create: if isAuthenticated() && \r\n                    userId == request.auth.uid;\r\n      \r\n      // Users can update their own profile (not role field)\r\n      // Admins can update any profile including role\r\n      allow update: if (isUserOwned(userId) && \r\n                    !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role'])) ||\r\n                    isAdmin();\r\n                    \r\n      // Special rule for FCM token updates\r\n      match /{document=**} {\r\n        allow write: if isAuthenticated() && \r\n                      request.auth.uid == userId;\r\n      }\r\n      \r\n      // Only admins can delete profiles\r\n      allow delete: if isAdmin();\r\n    }\r\n    \r\n    // Training Materials collection\r\n    match /trainingMaterials/{materialId} {\r\n      // Anyone authenticated can read training materials\r\n      allow read: if isAuthenticated();\r\n      \r\n      // Only admins can create, update or delete training materials\r\n      allow create, update, delete: if isAdmin();\r\n    }\r\n  }\r\n} ","name":"firestore.rules"}]},"createTime":"2025-04-27T15:11:38.525999Z","metadata":{"services":["cloud.firestore"]}}
[debug] [2025-04-27T15:11:40.024Z] [rules] created ruleset projects/gigfriend-9b3ea/rulesets/a08b4f59-fcae-4ba9-9193-7db2f080779f
