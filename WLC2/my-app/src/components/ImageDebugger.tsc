import React, { useState, useEffect } from 'react';
import styled from 'styled-components';

const DebugContainer = styled.div`
  background-color: #f0f0f0;
  padding: 20px;
  border-radius: 8px;
  margin-top: 20px;
`;

const DebugImage = styled.img`
  max-width: 100px;
  max-height: 100px;
  margin: 10px 0;
`;

const DebugText = styled.pre`
  white-space: pre-wrap;
  word-wrap: break-word;
`;

interface ImageDebuggerProps {
  imageUrl: string;
}

const ImageDebugger: React.FC<ImageDebuggerProps> = ({ imageUrl }) => {
  const [debugInfo, setDebugInfo] = useState<string>('');
  const [dataUrl, setDataUrl] = useState<string | null>(null);

  useEffect(() => {
    const fetchImage = async () => {
      try {
        const response = await fetch(imageUrl);
        setDebugInfo(prev => `${prev}Fetch response status: ${response.status}\n`);
        setDebugInfo(prev => `${prev}Content-Type: ${response.headers.get('Content-Type')}\n`);

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const blob = await response.blob();
        const reader = new FileReader();
        reader.onloadend = () => setDataUrl(reader.result as string);
        reader.readAsDataURL(blob);
      } catch (error) {
        setDebugInfo(prev => `${prev}Error fetching image: ${error}\n`);
      }
    };

    fetchImage();
  }, [imageUrl]);

  return (
    <DebugContainer>
      <h3>Image Debugger</h3>
      <p>Original URL: {imageUrl}</p>
      <DebugImage src={imageUrl} alt="Direct URL" onError={() => setDebugInfo(prev => `${prev}Error loading image directly\n`)} />
      <p>Image loaded via data URL:</p>
      {dataUrl && <DebugImage src={dataUrl} alt="Data URL" />}
      <DebugText>{debugInfo}</DebugText>
    </DebugContainer>
  );
};

export default ImageDebugger;