rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUserOwned(userId) {
      return isAuthenticated() && userId == request.auth.uid;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/userProfiles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isCompanyOwner(companyId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/companies/$(companyId)) && 
             get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
    }
    
    function hasValidFields(requiredFields) {
      return request.resource.data.keys().hasAll(requiredFields);
    }
    
    // Default rule - deny all access unless explicitly allowed
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Messages collection rules
    match /messages/{messageId} {
      // Allow reading messages if user is authenticated
      allow read: if isAuthenticated();
      
      // Allow creating messages if:
      // 1. User is authenticated
      // 2. The message's user.uid matches the authenticated user's ID
      // 3. The createdAt field is a valid timestamp
      // 4. Text is not empty and is a string
      // 5. Maximum text length is 2000 characters
      allow create: if isAuthenticated() &&
                    request.resource.data.user.uid == request.auth.uid &&
                    request.resource.data.createdAt is timestamp &&
                    request.resource.data.text is string &&
                    request.resource.data.text.size() > 0 &&
                    request.resource.data.text.size() <= 2000;
      
      // Prevent updates and deletes entirely (except for admins)
      allow update, delete: if isAdmin();
    }
    
    // TimeEntries collection rules
    match /timeEntries/{entryId} {
      // Allow reading only the user's own time entries (or all for admins)
      allow read: if isUserOwned(resource.data.userId) || isAdmin();
      
      // Allow creating time entries if:
      // 1. User is authenticated
      // 2. The entry's userId matches the authenticated user's ID
      // 3. Required fields exist and have correct types
      // 4. Clock-in time is not in the future
      allow create: if isAuthenticated() &&
                    request.resource.data.userId == request.auth.uid &&
                    request.resource.data.clockIn is timestamp &&
                    request.resource.data.createdAt is timestamp &&
                    request.resource.data.clockIn <= request.time &&
                    hasValidFields(['userId', 'clockIn', 'createdAt', 'status']);
      
      // Allow updating only the user's own time entries
      // Ensure userId cannot be changed
      allow update: if isUserOwned(resource.data.userId) &&
                    request.resource.data.userId == resource.data.userId &&
                    (request.resource.data.clockOut == null || 
                     request.resource.data.clockOut is timestamp);
      
      // Allow deleting only the user's own time entries
      allow delete: if isUserOwned(resource.data.userId);
    }
    
    // User Profiles collection
    match /userProfiles/{userId} {
      // Anyone who is authenticated can read any user profile
      allow read: if isAuthenticated();
      
      // Users can only create their own profile
      allow create: if isAuthenticated() && 
                    userId == request.auth.uid &&
                    hasValidFields(['displayName', 'email', 'createdAt']);
      
      // Users can only update their own profile (not role field)
      // Admins can update any profile including role
      allow update: if (isUserOwned(userId) && 
                       ((!request.resource.data.diff(resource.data).affectedKeys().hasAny(['role'])) ||
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fcmToken']))) ||
                     isAdmin();
      
      // Only admins can delete profiles
      allow delete: if isAdmin();
    }
    
    // Training Materials collection
    match /trainingMaterials/{materialId} {
      // Anyone authenticated can read training materials
      allow read: if isAuthenticated();
      
      // Only admins can create, update or delete training materials
      allow create, update, delete: if isAdmin();
    }
    
    // Companies collection
    match /companies/{companyId} {
      // Allow reading companies if user is authenticated
      allow read: if isAuthenticated();
      
      // Allow creating companies if:
      // 1. User is authenticated
      // 2. The company's ownerId matches the authenticated user's ID
      allow create: if isAuthenticated() &&
                    request.resource.data.ownerId == request.auth.uid &&
                    hasValidFields(['name', 'location', 'ownerId', 'createdAt']);
      
      // Allow updating only if user is the company owner
      allow update: if isCompanyOwner(companyId);
      
      // Allow deleting only if user is the company owner
      allow delete: if isCompanyOwner(companyId);
    }
    
    // Company Members collection
    match /companyMembers/{memberId} {
      // Allow reading if user is authenticated and:
      // 1. The record belongs to the user
      // 2. The user is the company owner
      // 3. The user is an admin
      allow read: if isAuthenticated() &&
                  (resource.data.userId == request.auth.uid ||
                   isCompanyOwner(resource.data.companyId) ||
                   isAdmin());
      
      // Allow creating if:
      // 1. User is authenticated
      // 2. The member's userId matches the authenticated user's ID (joining a company)
      // 3. Required fields exist
      allow create: if isAuthenticated() &&
                    request.resource.data.userId == request.auth.uid &&
                    hasValidFields(['userId', 'companyId', 'status', 'role', 'requestedAt']);
      
      // Allow updating if:
      // 1. User is the company owner and updating someone else's status
      // 2. User is updating their own record but not changing certain fields
      allow update: if (isCompanyOwner(resource.data.companyId) && 
                      resource.data.userId != request.auth.uid) ||
                    (resource.data.userId == request.auth.uid && 
                     !request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'role']));
      
      // Allow deleting if user is the company owner or deleting their own record
      allow delete: if isCompanyOwner(resource.data.companyId) || 
                     resource.data.userId == request.auth.uid;
    }
  }
} 